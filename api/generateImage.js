// generateImage.js
// IMPORTANT: This is a conceptual virtual try-on API using Google Gemini.
// **LIMITATION**: Gemini Vision cannot generate images - it only analyzes them!
// For true virtual try-on, you need an image generation model like:
// - OpenAI DALL-E 3
// - Midjourney API  
// - Stable Diffusion API
// - Custom ML models trained on fashion data
// 
// This implementation returns a text description instead of a generated image,
// which can be useful for prototyping or text-based try-on descriptions.
// Security: API key is hidden in Vercel env vars—never exposed to client.
// Cost: Gemini is pay-per-use (~$0.001-$0.002/request); monitor in Google console.

import { GoogleGenerativeAI } from "@google/generative-ai"; // Required dependency—install via package.json.

export default async function handler(req, res) {
  // Restrict to POST requests only (from Framer frontend).
  // This prevents unauthorized access (e.g., GET requests).
  if (req.method !== "POST") {
    return res.status(405).json({ error: "Method not allowed" });
  }

  // Parse the request body safely.
  // Extract userPhoto (base64 string), productImage (URL string), and prompt (string).
  const { userPhoto, productImage, prompt } = req.body;

  // Validate required fields to avoid processing invalid requests.
  // This helps catch errors early and saves costs.
  if (!userPhoto || !productImage || !prompt) {
    return res.status(400).json({ error: "Missing required fields: userPhoto, productImage, or prompt" });
  }

  // Retrieve Google API key from environment variables (set in Vercel dashboard).
  // This keeps the key secure—never hardcode it.
  const apiKey = process.env.GOOGLE_API_KEY;
  if (!apiKey) {
    return res.status(500).json({ error: "Google API key not configured" });
  }

  try {
    // Initialize the Gemini API client with the key.
    const genAI = new GoogleGenerativeAI(apiKey);

    // Use Gemini Vision model for image analysis (not generation).
    const model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });

    // Prepare the product image: Fetch from URL and convert to base64 (Gemini requires inline data).
    const productResponse = await fetch(productImage);
    if (!productResponse.ok) {
      throw new Error(`Failed to fetch product image: ${productResponse.statusText}`);
    }
    const productBuffer = await productResponse.arrayBuffer();
    const productBase64 = Buffer.from(productBuffer).toString("base64");
    const productMimeType = productResponse.headers.get("content-type") || "image/png";

    // Extract user photo base64 (strip data URL prefix if present).
    const userBase64 = userPhoto.split(",")[1] || userPhoto;

    // Build the multi-modal content array for Gemini Vision:
    const content = [
      { text: `${prompt}\n\nSince I cannot generate images, please provide a detailed description of how the clothing would look on the person, including fit, style, and visual appearance.` },
      {
        inlineData: {
          mimeType: "image/jpeg",
          data: userBase64
        }
      },
      {
        inlineData: {
          mimeType: productMimeType,
          data: productBase64
        }
      }
    ];

    // Call Gemini to analyze the images and provide description.
    const result = await model.generateContent(content);
    const response = await result.response;
    
    // Extract text description instead of trying to get image data.
    const description = response.text();
    if (!description) {
      throw new Error("No description generated by Gemini");
    }

    // Return the text description (not an image).
    // Frontend should handle this appropriately - show description to user.
    return res.status(200).json({ 
      description: description,
      message: "Virtual try-on description generated (Note: Gemini cannot generate actual images)",
      type: "text_description"
    });

  } catch (error) {
    // Comprehensive error handling: Log and return user-friendly message.
    // This prevents crashes and helps debugging (Vercel logs errors automatically).
    console.error("Error in image generation:", error.message || error);
    return res.status(500).json({ error: "Failed to generate try-on image. Please try again or check logs." });
  }
}
